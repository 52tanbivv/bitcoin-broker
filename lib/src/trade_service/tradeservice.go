// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package trade_service

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TradeService interface {
	Ping() (err error)
	// Parameters:
	//  - ExchangeConfigs
	ConfigKeys(exchange_configs []*ExchangeConfig) (err error)
	// Parameters:
	//  - AmountConfig
	ConfigAmount(amount_config *AmountConfig) (err error)
	GetExchangeStatus() (r *ExchangeStatus, err error)
	// Parameters:
	//  - Price
	//  - TradeType
	CheckPrice(price float64, trade_type TradeType) (err error)
	// Parameters:
	//  - Trade
	Buy(trade *Trade) (err error)
	// Parameters:
	//  - Trade
	Sell(trade *Trade) (err error)
	GetTicker() (r *Ticker, err error)
	GetAccount() (r []*Account, err error)
	GetAlertOrders() (err error)
}

type TradeServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewTradeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TradeServiceClient {
	return &TradeServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewTradeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TradeServiceClient {
	return &TradeServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *TradeServiceClient) Ping() (err error) {
	if err = p.sendPing(); err != nil {
		return
	}
	return
}

func (p *TradeServiceClient) sendPing() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ping", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := TradeServicePingArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - ExchangeConfigs
func (p *TradeServiceClient) ConfigKeys(exchange_configs []*ExchangeConfig) (err error) {
	if err = p.sendConfigKeys(exchange_configs); err != nil {
		return
	}
	return
}

func (p *TradeServiceClient) sendConfigKeys(exchange_configs []*ExchangeConfig) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("config_keys", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := TradeServiceConfigKeysArgs{
		ExchangeConfigs: exchange_configs,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - AmountConfig
func (p *TradeServiceClient) ConfigAmount(amount_config *AmountConfig) (err error) {
	if err = p.sendConfigAmount(amount_config); err != nil {
		return
	}
	return
}

func (p *TradeServiceClient) sendConfigAmount(amount_config *AmountConfig) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("config_amount", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := TradeServiceConfigAmountArgs{
		AmountConfig: amount_config,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TradeServiceClient) GetExchangeStatus() (r *ExchangeStatus, err error) {
	if err = p.sendGetExchangeStatus(); err != nil {
		return
	}
	return p.recvGetExchangeStatus()
}

func (p *TradeServiceClient) sendGetExchangeStatus() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_exchange_status", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TradeServiceGetExchangeStatusArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TradeServiceClient) recvGetExchangeStatus() (value *ExchangeStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_exchange_status" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_exchange_status failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_exchange_status failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_exchange_status failed: invalid message type")
		return
	}
	result := TradeServiceGetExchangeStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Price
//  - TradeType
func (p *TradeServiceClient) CheckPrice(price float64, trade_type TradeType) (err error) {
	if err = p.sendCheckPrice(price, trade_type); err != nil {
		return
	}
	return p.recvCheckPrice()
}

func (p *TradeServiceClient) sendCheckPrice(price float64, trade_type TradeType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("check_price", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TradeServiceCheckPriceArgs{
		Price:     price,
		TradeType: trade_type,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TradeServiceClient) recvCheckPrice() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "check_price" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "check_price failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "check_price failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "check_price failed: invalid message type")
		return
	}
	result := TradeServiceCheckPriceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.TradeException != nil {
		err = result.TradeException
		return
	}
	return
}

// Parameters:
//  - Trade
func (p *TradeServiceClient) Buy(trade *Trade) (err error) {
	if err = p.sendBuy(trade); err != nil {
		return
	}
	return p.recvBuy()
}

func (p *TradeServiceClient) sendBuy(trade *Trade) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("buy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TradeServiceBuyArgs{
		Trade: trade,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TradeServiceClient) recvBuy() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "buy" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "buy failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "buy failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "buy failed: invalid message type")
		return
	}
	result := TradeServiceBuyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.TradeException != nil {
		err = result.TradeException
		return
	}
	return
}

// Parameters:
//  - Trade
func (p *TradeServiceClient) Sell(trade *Trade) (err error) {
	if err = p.sendSell(trade); err != nil {
		return
	}
	return p.recvSell()
}

func (p *TradeServiceClient) sendSell(trade *Trade) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sell", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TradeServiceSellArgs{
		Trade: trade,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TradeServiceClient) recvSell() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sell" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sell failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sell failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sell failed: invalid message type")
		return
	}
	result := TradeServiceSellResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.TradeException != nil {
		err = result.TradeException
		return
	}
	return
}

func (p *TradeServiceClient) GetTicker() (r *Ticker, err error) {
	if err = p.sendGetTicker(); err != nil {
		return
	}
	return p.recvGetTicker()
}

func (p *TradeServiceClient) sendGetTicker() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_ticker", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TradeServiceGetTickerArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TradeServiceClient) recvGetTicker() (value *Ticker, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_ticker" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_ticker failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_ticker failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_ticker failed: invalid message type")
		return
	}
	result := TradeServiceGetTickerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TradeServiceClient) GetAccount() (r []*Account, err error) {
	if err = p.sendGetAccount(); err != nil {
		return
	}
	return p.recvGetAccount()
}

func (p *TradeServiceClient) sendGetAccount() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_account", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TradeServiceGetAccountArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TradeServiceClient) recvGetAccount() (value []*Account, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_account" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_account failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_account failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_account failed: invalid message type")
		return
	}
	result := TradeServiceGetAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TradeServiceClient) GetAlertOrders() (err error) {
	if err = p.sendGetAlertOrders(); err != nil {
		return
	}
	return p.recvGetAlertOrders()
}

func (p *TradeServiceClient) sendGetAlertOrders() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_alert_orders", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TradeServiceGetAlertOrdersArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TradeServiceClient) recvGetAlertOrders() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_alert_orders" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_alert_orders failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_alert_orders failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_alert_orders failed: invalid message type")
		return
	}
	result := TradeServiceGetAlertOrdersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.TradeException != nil {
		err = result.TradeException
		return
	}
	return
}

type TradeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TradeService
}

func (p *TradeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TradeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TradeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTradeServiceProcessor(handler TradeService) *TradeServiceProcessor {

	self14 := &TradeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self14.processorMap["ping"] = &tradeServiceProcessorPing{handler: handler}
	self14.processorMap["config_keys"] = &tradeServiceProcessorConfigKeys{handler: handler}
	self14.processorMap["config_amount"] = &tradeServiceProcessorConfigAmount{handler: handler}
	self14.processorMap["get_exchange_status"] = &tradeServiceProcessorGetExchangeStatus{handler: handler}
	self14.processorMap["check_price"] = &tradeServiceProcessorCheckPrice{handler: handler}
	self14.processorMap["buy"] = &tradeServiceProcessorBuy{handler: handler}
	self14.processorMap["sell"] = &tradeServiceProcessorSell{handler: handler}
	self14.processorMap["get_ticker"] = &tradeServiceProcessorGetTicker{handler: handler}
	self14.processorMap["get_account"] = &tradeServiceProcessorGetAccount{handler: handler}
	self14.processorMap["get_alert_orders"] = &tradeServiceProcessorGetAlertOrders{handler: handler}
	return self14
}

func (p *TradeServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x15 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x15.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x15

}

type tradeServiceProcessorPing struct {
	handler TradeService
}

func (p *tradeServiceProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TradeServicePingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Ping(); err2 != nil {
		return true, err2
	}
	return true, nil
}

type tradeServiceProcessorConfigKeys struct {
	handler TradeService
}

func (p *tradeServiceProcessorConfigKeys) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TradeServiceConfigKeysArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.ConfigKeys(args.ExchangeConfigs); err2 != nil {
		return true, err2
	}
	return true, nil
}

type tradeServiceProcessorConfigAmount struct {
	handler TradeService
}

func (p *tradeServiceProcessorConfigAmount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TradeServiceConfigAmountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.ConfigAmount(args.AmountConfig); err2 != nil {
		return true, err2
	}
	return true, nil
}

type tradeServiceProcessorGetExchangeStatus struct {
	handler TradeService
}

func (p *tradeServiceProcessorGetExchangeStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TradeServiceGetExchangeStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_exchange_status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TradeServiceGetExchangeStatusResult{}
	var retval *ExchangeStatus
	var err2 error
	if retval, err2 = p.handler.GetExchangeStatus(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_exchange_status: "+err2.Error())
		oprot.WriteMessageBegin("get_exchange_status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_exchange_status", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tradeServiceProcessorCheckPrice struct {
	handler TradeService
}

func (p *tradeServiceProcessorCheckPrice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TradeServiceCheckPriceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("check_price", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TradeServiceCheckPriceResult{}
	var err2 error
	if err2 = p.handler.CheckPrice(args.Price, args.TradeType); err2 != nil {
		switch v := err2.(type) {
		case *TradeException:
			result.TradeException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check_price: "+err2.Error())
			oprot.WriteMessageBegin("check_price", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("check_price", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tradeServiceProcessorBuy struct {
	handler TradeService
}

func (p *tradeServiceProcessorBuy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TradeServiceBuyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("buy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TradeServiceBuyResult{}
	var err2 error
	if err2 = p.handler.Buy(args.Trade); err2 != nil {
		switch v := err2.(type) {
		case *TradeException:
			result.TradeException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing buy: "+err2.Error())
			oprot.WriteMessageBegin("buy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("buy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tradeServiceProcessorSell struct {
	handler TradeService
}

func (p *tradeServiceProcessorSell) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TradeServiceSellArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sell", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TradeServiceSellResult{}
	var err2 error
	if err2 = p.handler.Sell(args.Trade); err2 != nil {
		switch v := err2.(type) {
		case *TradeException:
			result.TradeException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sell: "+err2.Error())
			oprot.WriteMessageBegin("sell", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sell", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tradeServiceProcessorGetTicker struct {
	handler TradeService
}

func (p *tradeServiceProcessorGetTicker) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TradeServiceGetTickerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_ticker", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TradeServiceGetTickerResult{}
	var retval *Ticker
	var err2 error
	if retval, err2 = p.handler.GetTicker(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_ticker: "+err2.Error())
		oprot.WriteMessageBegin("get_ticker", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_ticker", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tradeServiceProcessorGetAccount struct {
	handler TradeService
}

func (p *tradeServiceProcessorGetAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TradeServiceGetAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_account", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TradeServiceGetAccountResult{}
	var retval []*Account
	var err2 error
	if retval, err2 = p.handler.GetAccount(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_account: "+err2.Error())
		oprot.WriteMessageBegin("get_account", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_account", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tradeServiceProcessorGetAlertOrders struct {
	handler TradeService
}

func (p *tradeServiceProcessorGetAlertOrders) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TradeServiceGetAlertOrdersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_alert_orders", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TradeServiceGetAlertOrdersResult{}
	var err2 error
	if err2 = p.handler.GetAlertOrders(); err2 != nil {
		switch v := err2.(type) {
		case *TradeException:
			result.TradeException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_alert_orders: "+err2.Error())
			oprot.WriteMessageBegin("get_alert_orders", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_alert_orders", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type TradeServicePingArgs struct {
}

func NewTradeServicePingArgs() *TradeServicePingArgs {
	return &TradeServicePingArgs{}
}

func (p *TradeServicePingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServicePingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServicePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServicePingArgs(%+v)", *p)
}

// Attributes:
//  - ExchangeConfigs
type TradeServiceConfigKeysArgs struct {
	ExchangeConfigs []*ExchangeConfig `thrift:"exchange_configs,1" json:"exchange_configs"`
}

func NewTradeServiceConfigKeysArgs() *TradeServiceConfigKeysArgs {
	return &TradeServiceConfigKeysArgs{}
}

func (p *TradeServiceConfigKeysArgs) GetExchangeConfigs() []*ExchangeConfig {
	return p.ExchangeConfigs
}
func (p *TradeServiceConfigKeysArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceConfigKeysArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ExchangeConfig, 0, size)
	p.ExchangeConfigs = tSlice
	for i := 0; i < size; i++ {
		_elem16 := &ExchangeConfig{}
		if err := _elem16.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
		}
		p.ExchangeConfigs = append(p.ExchangeConfigs, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TradeServiceConfigKeysArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("config_keys_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceConfigKeysArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exchange_configs", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exchange_configs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExchangeConfigs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ExchangeConfigs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exchange_configs: ", p), err)
	}
	return err
}

func (p *TradeServiceConfigKeysArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceConfigKeysArgs(%+v)", *p)
}

// Attributes:
//  - AmountConfig
type TradeServiceConfigAmountArgs struct {
	AmountConfig *AmountConfig `thrift:"amount_config,1" json:"amount_config"`
}

func NewTradeServiceConfigAmountArgs() *TradeServiceConfigAmountArgs {
	return &TradeServiceConfigAmountArgs{}
}

var TradeServiceConfigAmountArgs_AmountConfig_DEFAULT *AmountConfig

func (p *TradeServiceConfigAmountArgs) GetAmountConfig() *AmountConfig {
	if !p.IsSetAmountConfig() {
		return TradeServiceConfigAmountArgs_AmountConfig_DEFAULT
	}
	return p.AmountConfig
}
func (p *TradeServiceConfigAmountArgs) IsSetAmountConfig() bool {
	return p.AmountConfig != nil
}

func (p *TradeServiceConfigAmountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceConfigAmountArgs) readField1(iprot thrift.TProtocol) error {
	p.AmountConfig = &AmountConfig{}
	if err := p.AmountConfig.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AmountConfig), err)
	}
	return nil
}

func (p *TradeServiceConfigAmountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("config_amount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceConfigAmountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount_config", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:amount_config: ", p), err)
	}
	if err := p.AmountConfig.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AmountConfig), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:amount_config: ", p), err)
	}
	return err
}

func (p *TradeServiceConfigAmountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceConfigAmountArgs(%+v)", *p)
}

type TradeServiceGetExchangeStatusArgs struct {
}

func NewTradeServiceGetExchangeStatusArgs() *TradeServiceGetExchangeStatusArgs {
	return &TradeServiceGetExchangeStatusArgs{}
}

func (p *TradeServiceGetExchangeStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceGetExchangeStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_exchange_status_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceGetExchangeStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceGetExchangeStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TradeServiceGetExchangeStatusResult struct {
	Success *ExchangeStatus `thrift:"success,0" json:"success,omitempty"`
}

func NewTradeServiceGetExchangeStatusResult() *TradeServiceGetExchangeStatusResult {
	return &TradeServiceGetExchangeStatusResult{}
}

var TradeServiceGetExchangeStatusResult_Success_DEFAULT *ExchangeStatus

func (p *TradeServiceGetExchangeStatusResult) GetSuccess() *ExchangeStatus {
	if !p.IsSetSuccess() {
		return TradeServiceGetExchangeStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TradeServiceGetExchangeStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TradeServiceGetExchangeStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceGetExchangeStatusResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ExchangeStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TradeServiceGetExchangeStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_exchange_status_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceGetExchangeStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TradeServiceGetExchangeStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceGetExchangeStatusResult(%+v)", *p)
}

// Attributes:
//  - Price
//  - TradeType
type TradeServiceCheckPriceArgs struct {
	Price     float64   `thrift:"price,1" json:"price"`
	TradeType TradeType `thrift:"trade_type,2" json:"trade_type"`
}

func NewTradeServiceCheckPriceArgs() *TradeServiceCheckPriceArgs {
	return &TradeServiceCheckPriceArgs{}
}

func (p *TradeServiceCheckPriceArgs) GetPrice() float64 {
	return p.Price
}

func (p *TradeServiceCheckPriceArgs) GetTradeType() TradeType {
	return p.TradeType
}
func (p *TradeServiceCheckPriceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceCheckPriceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *TradeServiceCheckPriceArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TradeType(v)
		p.TradeType = temp
	}
	return nil
}

func (p *TradeServiceCheckPriceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("check_price_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceCheckPriceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.price (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:price: ", p), err)
	}
	return err
}

func (p *TradeServiceCheckPriceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trade_type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trade_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TradeType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.trade_type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trade_type: ", p), err)
	}
	return err
}

func (p *TradeServiceCheckPriceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceCheckPriceArgs(%+v)", *p)
}

// Attributes:
//  - TradeException
type TradeServiceCheckPriceResult struct {
	TradeException *TradeException `thrift:"tradeException,1" json:"tradeException,omitempty"`
}

func NewTradeServiceCheckPriceResult() *TradeServiceCheckPriceResult {
	return &TradeServiceCheckPriceResult{}
}

var TradeServiceCheckPriceResult_TradeException_DEFAULT *TradeException

func (p *TradeServiceCheckPriceResult) GetTradeException() *TradeException {
	if !p.IsSetTradeException() {
		return TradeServiceCheckPriceResult_TradeException_DEFAULT
	}
	return p.TradeException
}
func (p *TradeServiceCheckPriceResult) IsSetTradeException() bool {
	return p.TradeException != nil
}

func (p *TradeServiceCheckPriceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceCheckPriceResult) readField1(iprot thrift.TProtocol) error {
	p.TradeException = &TradeException{}
	if err := p.TradeException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TradeException), err)
	}
	return nil
}

func (p *TradeServiceCheckPriceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("check_price_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceCheckPriceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTradeException() {
		if err := oprot.WriteFieldBegin("tradeException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeException: ", p), err)
		}
		if err := p.TradeException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TradeException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeException: ", p), err)
		}
	}
	return err
}

func (p *TradeServiceCheckPriceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceCheckPriceResult(%+v)", *p)
}

// Attributes:
//  - Trade
type TradeServiceBuyArgs struct {
	Trade *Trade `thrift:"trade,1" json:"trade"`
}

func NewTradeServiceBuyArgs() *TradeServiceBuyArgs {
	return &TradeServiceBuyArgs{}
}

var TradeServiceBuyArgs_Trade_DEFAULT *Trade

func (p *TradeServiceBuyArgs) GetTrade() *Trade {
	if !p.IsSetTrade() {
		return TradeServiceBuyArgs_Trade_DEFAULT
	}
	return p.Trade
}
func (p *TradeServiceBuyArgs) IsSetTrade() bool {
	return p.Trade != nil
}

func (p *TradeServiceBuyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceBuyArgs) readField1(iprot thrift.TProtocol) error {
	p.Trade = &Trade{}
	if err := p.Trade.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Trade), err)
	}
	return nil
}

func (p *TradeServiceBuyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("buy_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceBuyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trade", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:trade: ", p), err)
	}
	if err := p.Trade.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Trade), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:trade: ", p), err)
	}
	return err
}

func (p *TradeServiceBuyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceBuyArgs(%+v)", *p)
}

// Attributes:
//  - TradeException
type TradeServiceBuyResult struct {
	TradeException *TradeException `thrift:"tradeException,1" json:"tradeException,omitempty"`
}

func NewTradeServiceBuyResult() *TradeServiceBuyResult {
	return &TradeServiceBuyResult{}
}

var TradeServiceBuyResult_TradeException_DEFAULT *TradeException

func (p *TradeServiceBuyResult) GetTradeException() *TradeException {
	if !p.IsSetTradeException() {
		return TradeServiceBuyResult_TradeException_DEFAULT
	}
	return p.TradeException
}
func (p *TradeServiceBuyResult) IsSetTradeException() bool {
	return p.TradeException != nil
}

func (p *TradeServiceBuyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceBuyResult) readField1(iprot thrift.TProtocol) error {
	p.TradeException = &TradeException{}
	if err := p.TradeException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TradeException), err)
	}
	return nil
}

func (p *TradeServiceBuyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("buy_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceBuyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTradeException() {
		if err := oprot.WriteFieldBegin("tradeException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeException: ", p), err)
		}
		if err := p.TradeException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TradeException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeException: ", p), err)
		}
	}
	return err
}

func (p *TradeServiceBuyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceBuyResult(%+v)", *p)
}

// Attributes:
//  - Trade
type TradeServiceSellArgs struct {
	Trade *Trade `thrift:"trade,1" json:"trade"`
}

func NewTradeServiceSellArgs() *TradeServiceSellArgs {
	return &TradeServiceSellArgs{}
}

var TradeServiceSellArgs_Trade_DEFAULT *Trade

func (p *TradeServiceSellArgs) GetTrade() *Trade {
	if !p.IsSetTrade() {
		return TradeServiceSellArgs_Trade_DEFAULT
	}
	return p.Trade
}
func (p *TradeServiceSellArgs) IsSetTrade() bool {
	return p.Trade != nil
}

func (p *TradeServiceSellArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceSellArgs) readField1(iprot thrift.TProtocol) error {
	p.Trade = &Trade{}
	if err := p.Trade.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Trade), err)
	}
	return nil
}

func (p *TradeServiceSellArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sell_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceSellArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trade", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:trade: ", p), err)
	}
	if err := p.Trade.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Trade), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:trade: ", p), err)
	}
	return err
}

func (p *TradeServiceSellArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceSellArgs(%+v)", *p)
}

// Attributes:
//  - TradeException
type TradeServiceSellResult struct {
	TradeException *TradeException `thrift:"tradeException,1" json:"tradeException,omitempty"`
}

func NewTradeServiceSellResult() *TradeServiceSellResult {
	return &TradeServiceSellResult{}
}

var TradeServiceSellResult_TradeException_DEFAULT *TradeException

func (p *TradeServiceSellResult) GetTradeException() *TradeException {
	if !p.IsSetTradeException() {
		return TradeServiceSellResult_TradeException_DEFAULT
	}
	return p.TradeException
}
func (p *TradeServiceSellResult) IsSetTradeException() bool {
	return p.TradeException != nil
}

func (p *TradeServiceSellResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceSellResult) readField1(iprot thrift.TProtocol) error {
	p.TradeException = &TradeException{}
	if err := p.TradeException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TradeException), err)
	}
	return nil
}

func (p *TradeServiceSellResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sell_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceSellResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTradeException() {
		if err := oprot.WriteFieldBegin("tradeException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeException: ", p), err)
		}
		if err := p.TradeException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TradeException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeException: ", p), err)
		}
	}
	return err
}

func (p *TradeServiceSellResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceSellResult(%+v)", *p)
}

type TradeServiceGetTickerArgs struct {
}

func NewTradeServiceGetTickerArgs() *TradeServiceGetTickerArgs {
	return &TradeServiceGetTickerArgs{}
}

func (p *TradeServiceGetTickerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceGetTickerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_ticker_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceGetTickerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceGetTickerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TradeServiceGetTickerResult struct {
	Success *Ticker `thrift:"success,0" json:"success,omitempty"`
}

func NewTradeServiceGetTickerResult() *TradeServiceGetTickerResult {
	return &TradeServiceGetTickerResult{}
}

var TradeServiceGetTickerResult_Success_DEFAULT *Ticker

func (p *TradeServiceGetTickerResult) GetSuccess() *Ticker {
	if !p.IsSetSuccess() {
		return TradeServiceGetTickerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TradeServiceGetTickerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TradeServiceGetTickerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceGetTickerResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Ticker{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TradeServiceGetTickerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_ticker_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceGetTickerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TradeServiceGetTickerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceGetTickerResult(%+v)", *p)
}

type TradeServiceGetAccountArgs struct {
}

func NewTradeServiceGetAccountArgs() *TradeServiceGetAccountArgs {
	return &TradeServiceGetAccountArgs{}
}

func (p *TradeServiceGetAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceGetAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_account_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceGetAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceGetAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TradeServiceGetAccountResult struct {
	Success []*Account `thrift:"success,0" json:"success,omitempty"`
}

func NewTradeServiceGetAccountResult() *TradeServiceGetAccountResult {
	return &TradeServiceGetAccountResult{}
}

var TradeServiceGetAccountResult_Success_DEFAULT []*Account

func (p *TradeServiceGetAccountResult) GetSuccess() []*Account {
	return p.Success
}
func (p *TradeServiceGetAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TradeServiceGetAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceGetAccountResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Account, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &Account{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.Success = append(p.Success, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TradeServiceGetAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_account_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceGetAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TradeServiceGetAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceGetAccountResult(%+v)", *p)
}

type TradeServiceGetAlertOrdersArgs struct {
}

func NewTradeServiceGetAlertOrdersArgs() *TradeServiceGetAlertOrdersArgs {
	return &TradeServiceGetAlertOrdersArgs{}
}

func (p *TradeServiceGetAlertOrdersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceGetAlertOrdersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_alert_orders_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceGetAlertOrdersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceGetAlertOrdersArgs(%+v)", *p)
}

// Attributes:
//  - TradeException
type TradeServiceGetAlertOrdersResult struct {
	TradeException *TradeException `thrift:"tradeException,1" json:"tradeException,omitempty"`
}

func NewTradeServiceGetAlertOrdersResult() *TradeServiceGetAlertOrdersResult {
	return &TradeServiceGetAlertOrdersResult{}
}

var TradeServiceGetAlertOrdersResult_TradeException_DEFAULT *TradeException

func (p *TradeServiceGetAlertOrdersResult) GetTradeException() *TradeException {
	if !p.IsSetTradeException() {
		return TradeServiceGetAlertOrdersResult_TradeException_DEFAULT
	}
	return p.TradeException
}
func (p *TradeServiceGetAlertOrdersResult) IsSetTradeException() bool {
	return p.TradeException != nil
}

func (p *TradeServiceGetAlertOrdersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeServiceGetAlertOrdersResult) readField1(iprot thrift.TProtocol) error {
	p.TradeException = &TradeException{}
	if err := p.TradeException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TradeException), err)
	}
	return nil
}

func (p *TradeServiceGetAlertOrdersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_alert_orders_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeServiceGetAlertOrdersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTradeException() {
		if err := oprot.WriteFieldBegin("tradeException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeException: ", p), err)
		}
		if err := p.TradeException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TradeException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeException: ", p), err)
		}
	}
	return err
}

func (p *TradeServiceGetAlertOrdersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeServiceGetAlertOrdersResult(%+v)", *p)
}
