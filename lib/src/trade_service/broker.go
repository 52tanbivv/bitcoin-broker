// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package trade_service

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TradeType int64
const (
  TradeType_BUY TradeType = 0
  TradeType_SELL TradeType = 1
)

func (p TradeType) String() string {
  switch p {
  case TradeType_BUY: return "BUY"
  case TradeType_SELL: return "SELL"
  }
  return "<UNSET>"
}

func TradeTypeFromString(s string) (TradeType, error) {
  switch s {
  case "BUY": return TradeType_BUY, nil 
  case "SELL": return TradeType_SELL, nil 
  }
  return TradeType(0), fmt.Errorf("not a valid TradeType string")
}


func TradeTypePtr(v TradeType) *TradeType { return &v }

func (p TradeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TradeType) UnmarshalText(text []byte) error {
q, err := TradeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TradeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TradeType(v)
return nil
}

func (p * TradeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OrderStatus int64
const (
  OrderStatus_TIME_WEIGHTED OrderStatus = 0
  OrderStatus_SPLIT OrderStatus = 1
  OrderStatus_READY OrderStatus = 2
  OrderStatus_ORDERED OrderStatus = 3
  OrderStatus_SUCCESS OrderStatus = 4
  OrderStatus_ERROR OrderStatus = 5
  OrderStatus_CANCELED OrderStatus = 6
  OrderStatus_MATCH OrderStatus = 7
)

func (p OrderStatus) String() string {
  switch p {
  case OrderStatus_TIME_WEIGHTED: return "TIME_WEIGHTED"
  case OrderStatus_SPLIT: return "SPLIT"
  case OrderStatus_READY: return "READY"
  case OrderStatus_ORDERED: return "ORDERED"
  case OrderStatus_SUCCESS: return "SUCCESS"
  case OrderStatus_ERROR: return "ERROR"
  case OrderStatus_CANCELED: return "CANCELED"
  case OrderStatus_MATCH: return "MATCH"
  }
  return "<UNSET>"
}

func OrderStatusFromString(s string) (OrderStatus, error) {
  switch s {
  case "TIME_WEIGHTED": return OrderStatus_TIME_WEIGHTED, nil 
  case "SPLIT": return OrderStatus_SPLIT, nil 
  case "READY": return OrderStatus_READY, nil 
  case "ORDERED": return OrderStatus_ORDERED, nil 
  case "SUCCESS": return OrderStatus_SUCCESS, nil 
  case "ERROR": return OrderStatus_ERROR, nil 
  case "CANCELED": return OrderStatus_CANCELED, nil 
  case "MATCH": return OrderStatus_MATCH, nil 
  }
  return OrderStatus(0), fmt.Errorf("not a valid OrderStatus string")
}


func OrderStatusPtr(v OrderStatus) *OrderStatus { return &v }

func (p OrderStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OrderStatus) UnmarshalText(text []byte) error {
q, err := OrderStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OrderStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OrderStatus(v)
return nil
}

func (p * OrderStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Reason
type TradeException struct {
  Reason string `thrift:"reason,1" db:"reason" json:"reason"`
}

func NewTradeException() *TradeException {
  return &TradeException{}
}


func (p *TradeException) GetReason() string {
  return p.Reason
}
func (p *TradeException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *TradeException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TradeException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reason", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reason: ", p), err) }
  if err := oprot.WriteString(string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reason: ", p), err) }
  return err
}

func (p *TradeException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeException(%+v)", *p)
}

func (p *TradeException) Error() string {
  return p.String()
}

// Attributes:
//  - Canbuy
//  - Cansell
type ExchangeStatus struct {
  Canbuy bool `thrift:"canbuy,1" db:"canbuy" json:"canbuy"`
  Cansell bool `thrift:"cansell,2" db:"cansell" json:"cansell"`
}

func NewExchangeStatus() *ExchangeStatus {
  return &ExchangeStatus{}
}


func (p *ExchangeStatus) GetCanbuy() bool {
  return p.Canbuy
}

func (p *ExchangeStatus) GetCansell() bool {
  return p.Cansell
}
func (p *ExchangeStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExchangeStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Canbuy = v
}
  return nil
}

func (p *ExchangeStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cansell = v
}
  return nil
}

func (p *ExchangeStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExchangeStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExchangeStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("canbuy", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:canbuy: ", p), err) }
  if err := oprot.WriteBool(bool(p.Canbuy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.canbuy (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:canbuy: ", p), err) }
  return err
}

func (p *ExchangeStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cansell", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cansell: ", p), err) }
  if err := oprot.WriteBool(bool(p.Cansell)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cansell (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cansell: ", p), err) }
  return err
}

func (p *ExchangeStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExchangeStatus(%+v)", *p)
}

// Attributes:
//  - Exchange
//  - AccessKey
//  - SecretKey
type ExchangeConfig struct {
  Exchange string `thrift:"exchange,1" db:"exchange" json:"exchange"`
  AccessKey string `thrift:"access_key,2" db:"access_key" json:"access_key"`
  SecretKey string `thrift:"secret_key,3" db:"secret_key" json:"secret_key"`
}

func NewExchangeConfig() *ExchangeConfig {
  return &ExchangeConfig{}
}


func (p *ExchangeConfig) GetExchange() string {
  return p.Exchange
}

func (p *ExchangeConfig) GetAccessKey() string {
  return p.AccessKey
}

func (p *ExchangeConfig) GetSecretKey() string {
  return p.SecretKey
}
func (p *ExchangeConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExchangeConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Exchange = v
}
  return nil
}

func (p *ExchangeConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccessKey = v
}
  return nil
}

func (p *ExchangeConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SecretKey = v
}
  return nil
}

func (p *ExchangeConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExchangeConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExchangeConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exchange", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exchange: ", p), err) }
  if err := oprot.WriteString(string(p.Exchange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exchange (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exchange: ", p), err) }
  return err
}

func (p *ExchangeConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("access_key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:access_key: ", p), err) }
  if err := oprot.WriteString(string(p.AccessKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.access_key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:access_key: ", p), err) }
  return err
}

func (p *ExchangeConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secret_key", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:secret_key: ", p), err) }
  if err := oprot.WriteString(string(p.SecretKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secret_key (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:secret_key: ", p), err) }
  return err
}

func (p *ExchangeConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExchangeConfig(%+v)", *p)
}

// Attributes:
//  - MaxCny
//  - MaxBtc
type AmountConfig struct {
  MaxCny float64 `thrift:"max_cny,1" db:"max_cny" json:"max_cny"`
  MaxBtc float64 `thrift:"max_btc,2" db:"max_btc" json:"max_btc"`
}

func NewAmountConfig() *AmountConfig {
  return &AmountConfig{}
}


func (p *AmountConfig) GetMaxCny() float64 {
  return p.MaxCny
}

func (p *AmountConfig) GetMaxBtc() float64 {
  return p.MaxBtc
}
func (p *AmountConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AmountConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MaxCny = v
}
  return nil
}

func (p *AmountConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxBtc = v
}
  return nil
}

func (p *AmountConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AmountConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AmountConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_cny", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:max_cny: ", p), err) }
  if err := oprot.WriteDouble(float64(p.MaxCny)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_cny (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:max_cny: ", p), err) }
  return err
}

func (p *AmountConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_btc", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max_btc: ", p), err) }
  if err := oprot.WriteDouble(float64(p.MaxBtc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_btc (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max_btc: ", p), err) }
  return err
}

func (p *AmountConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AmountConfig(%+v)", *p)
}

// Attributes:
//  - Exchange
//  - AvailableCny
//  - AvailableBtc
//  - FrozenCny
//  - FrozenBtc
//  - PauseTrade
type Account struct {
  Exchange string `thrift:"exchange,1" db:"exchange" json:"exchange"`
  AvailableCny float64 `thrift:"available_cny,2" db:"available_cny" json:"available_cny"`
  AvailableBtc float64 `thrift:"available_btc,3" db:"available_btc" json:"available_btc"`
  FrozenCny float64 `thrift:"frozen_cny,4" db:"frozen_cny" json:"frozen_cny"`
  FrozenBtc float64 `thrift:"frozen_btc,5" db:"frozen_btc" json:"frozen_btc"`
  PauseTrade bool `thrift:"pause_trade,6" db:"pause_trade" json:"pause_trade"`
}

func NewAccount() *Account {
  return &Account{}
}


func (p *Account) GetExchange() string {
  return p.Exchange
}

func (p *Account) GetAvailableCny() float64 {
  return p.AvailableCny
}

func (p *Account) GetAvailableBtc() float64 {
  return p.AvailableBtc
}

func (p *Account) GetFrozenCny() float64 {
  return p.FrozenCny
}

func (p *Account) GetFrozenBtc() float64 {
  return p.FrozenBtc
}

func (p *Account) GetPauseTrade() bool {
  return p.PauseTrade
}
func (p *Account) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Account)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Exchange = v
}
  return nil
}

func (p *Account)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AvailableCny = v
}
  return nil
}

func (p *Account)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AvailableBtc = v
}
  return nil
}

func (p *Account)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FrozenCny = v
}
  return nil
}

func (p *Account)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FrozenBtc = v
}
  return nil
}

func (p *Account)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PauseTrade = v
}
  return nil
}

func (p *Account) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Account"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Account) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exchange", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exchange: ", p), err) }
  if err := oprot.WriteString(string(p.Exchange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exchange (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exchange: ", p), err) }
  return err
}

func (p *Account) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("available_cny", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:available_cny: ", p), err) }
  if err := oprot.WriteDouble(float64(p.AvailableCny)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.available_cny (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:available_cny: ", p), err) }
  return err
}

func (p *Account) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("available_btc", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:available_btc: ", p), err) }
  if err := oprot.WriteDouble(float64(p.AvailableBtc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.available_btc (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:available_btc: ", p), err) }
  return err
}

func (p *Account) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("frozen_cny", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:frozen_cny: ", p), err) }
  if err := oprot.WriteDouble(float64(p.FrozenCny)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.frozen_cny (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:frozen_cny: ", p), err) }
  return err
}

func (p *Account) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("frozen_btc", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:frozen_btc: ", p), err) }
  if err := oprot.WriteDouble(float64(p.FrozenBtc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.frozen_btc (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:frozen_btc: ", p), err) }
  return err
}

func (p *Account) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pause_trade", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pause_trade: ", p), err) }
  if err := oprot.WriteBool(bool(p.PauseTrade)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pause_trade (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pause_trade: ", p), err) }
  return err
}

func (p *Account) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Account(%+v)", *p)
}

// Attributes:
//  - Ask
//  - Bid
type Ticker struct {
  Ask float64 `thrift:"ask,1" db:"ask" json:"ask"`
  Bid float64 `thrift:"bid,2" db:"bid" json:"bid"`
}

func NewTicker() *Ticker {
  return &Ticker{}
}


func (p *Ticker) GetAsk() float64 {
  return p.Ask
}

func (p *Ticker) GetBid() float64 {
  return p.Bid
}
func (p *Ticker) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Ticker)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Ask = v
}
  return nil
}

func (p *Ticker)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Bid = v
}
  return nil
}

func (p *Ticker) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ticker"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ticker) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ask", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ask: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Ask)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ask (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ask: ", p), err) }
  return err
}

func (p *Ticker) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bid", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bid: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Bid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bid: ", p), err) }
  return err
}

func (p *Ticker) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ticker(%+v)", *p)
}

// Attributes:
//  - ClientID
//  - Amount
//  - Price
type Trade struct {
  ClientID string `thrift:"client_id,1" db:"client_id" json:"client_id"`
  Amount float64 `thrift:"amount,2" db:"amount" json:"amount"`
  Price float64 `thrift:"price,3" db:"price" json:"price"`
}

func NewTrade() *Trade {
  return &Trade{}
}


func (p *Trade) GetClientID() string {
  return p.ClientID
}

func (p *Trade) GetAmount() float64 {
  return p.Amount
}

func (p *Trade) GetPrice() float64 {
  return p.Price
}
func (p *Trade) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Trade)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientID = v
}
  return nil
}

func (p *Trade)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *Trade)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *Trade) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Trade"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Trade) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("client_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client_id: ", p), err) }
  if err := oprot.WriteString(string(p.ClientID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client_id: ", p), err) }
  return err
}

func (p *Trade) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err) }
  return err
}

func (p *Trade) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:price: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:price: ", p), err) }
  return err
}

func (p *Trade) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Trade(%+v)", *p)
}

// Attributes:
//  - ID
//  - SiteOrderID
//  - Exchange
//  - Price
//  - TradeType
//  - OrderStatus
//  - EstimateCny
//  - EstimateBtc
//  - EstimatePrice
//  - DealCny
//  - DealBtc
//  - DealPrice
//  - PriceMargin
//  - OrderID
//  - Created
//  - UpdateAt
//  - TryTimes
//  - Info
//  - Memo
//  - MatchID
type TradeOrder struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  SiteOrderID int64 `thrift:"site_order_id,2" db:"site_order_id" json:"site_order_id"`
  Exchange string `thrift:"exchange,3" db:"exchange" json:"exchange"`
  Price float64 `thrift:"price,4" db:"price" json:"price"`
  TradeType TradeType `thrift:"trade_type,5" db:"trade_type" json:"trade_type"`
  OrderStatus OrderStatus `thrift:"order_status,6" db:"order_status" json:"order_status"`
  EstimateCny float64 `thrift:"estimate_cny,7" db:"estimate_cny" json:"estimate_cny"`
  EstimateBtc float64 `thrift:"estimate_btc,8" db:"estimate_btc" json:"estimate_btc"`
  EstimatePrice float64 `thrift:"estimate_price,9" db:"estimate_price" json:"estimate_price"`
  DealCny float64 `thrift:"deal_cny,10" db:"deal_cny" json:"deal_cny"`
  DealBtc float64 `thrift:"deal_btc,11" db:"deal_btc" json:"deal_btc"`
  DealPrice float64 `thrift:"deal_price,12" db:"deal_price" json:"deal_price"`
  PriceMargin float64 `thrift:"price_margin,13" db:"price_margin" json:"price_margin"`
  OrderID string `thrift:"order_id,14" db:"order_id" json:"order_id"`
  Created string `thrift:"created,15" db:"created" json:"created"`
  UpdateAt string `thrift:"update_at,16" db:"update_at" json:"update_at"`
  TryTimes int64 `thrift:"try_times,17" db:"try_times" json:"try_times"`
  Info string `thrift:"info,18" db:"info" json:"info"`
  Memo string `thrift:"memo,19" db:"memo" json:"memo"`
  MatchID int64 `thrift:"match_id,20" db:"match_id" json:"match_id"`
}

func NewTradeOrder() *TradeOrder {
  return &TradeOrder{}
}


func (p *TradeOrder) GetID() int64 {
  return p.ID
}

func (p *TradeOrder) GetSiteOrderID() int64 {
  return p.SiteOrderID
}

func (p *TradeOrder) GetExchange() string {
  return p.Exchange
}

func (p *TradeOrder) GetPrice() float64 {
  return p.Price
}

func (p *TradeOrder) GetTradeType() TradeType {
  return p.TradeType
}

func (p *TradeOrder) GetOrderStatus() OrderStatus {
  return p.OrderStatus
}

func (p *TradeOrder) GetEstimateCny() float64 {
  return p.EstimateCny
}

func (p *TradeOrder) GetEstimateBtc() float64 {
  return p.EstimateBtc
}

func (p *TradeOrder) GetEstimatePrice() float64 {
  return p.EstimatePrice
}

func (p *TradeOrder) GetDealCny() float64 {
  return p.DealCny
}

func (p *TradeOrder) GetDealBtc() float64 {
  return p.DealBtc
}

func (p *TradeOrder) GetDealPrice() float64 {
  return p.DealPrice
}

func (p *TradeOrder) GetPriceMargin() float64 {
  return p.PriceMargin
}

func (p *TradeOrder) GetOrderID() string {
  return p.OrderID
}

func (p *TradeOrder) GetCreated() string {
  return p.Created
}

func (p *TradeOrder) GetUpdateAt() string {
  return p.UpdateAt
}

func (p *TradeOrder) GetTryTimes() int64 {
  return p.TryTimes
}

func (p *TradeOrder) GetInfo() string {
  return p.Info
}

func (p *TradeOrder) GetMemo() string {
  return p.Memo
}

func (p *TradeOrder) GetMatchID() int64 {
  return p.MatchID
}
func (p *TradeOrder) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeOrder)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TradeOrder)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SiteOrderID = v
}
  return nil
}

func (p *TradeOrder)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Exchange = v
}
  return nil
}

func (p *TradeOrder)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *TradeOrder)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TradeType(v)
  p.TradeType = temp
}
  return nil
}

func (p *TradeOrder)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := OrderStatus(v)
  p.OrderStatus = temp
}
  return nil
}

func (p *TradeOrder)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.EstimateCny = v
}
  return nil
}

func (p *TradeOrder)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.EstimateBtc = v
}
  return nil
}

func (p *TradeOrder)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.EstimatePrice = v
}
  return nil
}

func (p *TradeOrder)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DealCny = v
}
  return nil
}

func (p *TradeOrder)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.DealBtc = v
}
  return nil
}

func (p *TradeOrder)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.DealPrice = v
}
  return nil
}

func (p *TradeOrder)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PriceMargin = v
}
  return nil
}

func (p *TradeOrder)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.OrderID = v
}
  return nil
}

func (p *TradeOrder)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Created = v
}
  return nil
}

func (p *TradeOrder)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.UpdateAt = v
}
  return nil
}

func (p *TradeOrder)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.TryTimes = v
}
  return nil
}

func (p *TradeOrder)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Info = v
}
  return nil
}

func (p *TradeOrder)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.Memo = v
}
  return nil
}

func (p *TradeOrder)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.MatchID = v
}
  return nil
}

func (p *TradeOrder) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TradeOrder"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeOrder) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TradeOrder) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("site_order_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:site_order_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SiteOrderID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.site_order_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:site_order_id: ", p), err) }
  return err
}

func (p *TradeOrder) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exchange", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:exchange: ", p), err) }
  if err := oprot.WriteString(string(p.Exchange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exchange (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:exchange: ", p), err) }
  return err
}

func (p *TradeOrder) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:price: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:price: ", p), err) }
  return err
}

func (p *TradeOrder) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_type", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trade_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.TradeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trade_type: ", p), err) }
  return err
}

func (p *TradeOrder) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_status", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:order_status: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:order_status: ", p), err) }
  return err
}

func (p *TradeOrder) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("estimate_cny", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:estimate_cny: ", p), err) }
  if err := oprot.WriteDouble(float64(p.EstimateCny)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.estimate_cny (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:estimate_cny: ", p), err) }
  return err
}

func (p *TradeOrder) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("estimate_btc", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:estimate_btc: ", p), err) }
  if err := oprot.WriteDouble(float64(p.EstimateBtc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.estimate_btc (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:estimate_btc: ", p), err) }
  return err
}

func (p *TradeOrder) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("estimate_price", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:estimate_price: ", p), err) }
  if err := oprot.WriteDouble(float64(p.EstimatePrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.estimate_price (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:estimate_price: ", p), err) }
  return err
}

func (p *TradeOrder) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deal_cny", thrift.DOUBLE, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:deal_cny: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DealCny)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deal_cny (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:deal_cny: ", p), err) }
  return err
}

func (p *TradeOrder) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deal_btc", thrift.DOUBLE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:deal_btc: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DealBtc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deal_btc (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:deal_btc: ", p), err) }
  return err
}

func (p *TradeOrder) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deal_price", thrift.DOUBLE, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:deal_price: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DealPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deal_price (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:deal_price: ", p), err) }
  return err
}

func (p *TradeOrder) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price_margin", thrift.DOUBLE, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:price_margin: ", p), err) }
  if err := oprot.WriteDouble(float64(p.PriceMargin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price_margin (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:price_margin: ", p), err) }
  return err
}

func (p *TradeOrder) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_id", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:order_id: ", p), err) }
  if err := oprot.WriteString(string(p.OrderID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_id (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:order_id: ", p), err) }
  return err
}

func (p *TradeOrder) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:created: ", p), err) }
  if err := oprot.WriteString(string(p.Created)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:created: ", p), err) }
  return err
}

func (p *TradeOrder) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("update_at", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:update_at: ", p), err) }
  if err := oprot.WriteString(string(p.UpdateAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_at (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:update_at: ", p), err) }
  return err
}

func (p *TradeOrder) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("try_times", thrift.I64, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:try_times: ", p), err) }
  if err := oprot.WriteI64(int64(p.TryTimes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.try_times (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:try_times: ", p), err) }
  return err
}

func (p *TradeOrder) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:info: ", p), err) }
  if err := oprot.WriteString(string(p.Info)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.info (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:info: ", p), err) }
  return err
}

func (p *TradeOrder) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memo", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:memo: ", p), err) }
  if err := oprot.WriteString(string(p.Memo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memo (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:memo: ", p), err) }
  return err
}

func (p *TradeOrder) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("match_id", thrift.I64, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:match_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.MatchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.match_id (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:match_id: ", p), err) }
  return err
}

func (p *TradeOrder) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeOrder(%+v)", *p)
}

type TradeService interface {
  Ping() (err error)
  // Parameters:
  //  - ExchangeConfigs
  ConfigKeys(exchange_configs []*ExchangeConfig) (err error)
  // Parameters:
  //  - AmountConfig
  ConfigAmount(amount_config *AmountConfig) (err error)
  GetExchangeStatus() (r *ExchangeStatus, err error)
  // Parameters:
  //  - Price
  //  - TradeType
  CheckPrice(price float64, trade_type TradeType) (err error)
  // Parameters:
  //  - Trade
  Buy(trade *Trade) (err error)
  // Parameters:
  //  - Trade
  Sell(trade *Trade) (err error)
  GetTicker() (r *Ticker, err error)
  GetAccount() (r []*Account, err error)
  GetAlertOrders() (err error)
}

type TradeServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewTradeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TradeServiceClient {
  return &TradeServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewTradeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TradeServiceClient {
  return &TradeServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *TradeServiceClient) Ping() (err error) {
  if err = p.sendPing(); err != nil { return }
  return
}

func (p *TradeServiceClient) sendPing()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ping", thrift.ONEWAY, p.SeqId); err != nil {
      return
  }
  args := TradeServicePingArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}

// Parameters:
//  - ExchangeConfigs
func (p *TradeServiceClient) ConfigKeys(exchange_configs []*ExchangeConfig) (err error) {
  if err = p.sendConfigKeys(exchange_configs); err != nil { return }
  return
}

func (p *TradeServiceClient) sendConfigKeys(exchange_configs []*ExchangeConfig)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("config_keys", thrift.ONEWAY, p.SeqId); err != nil {
      return
  }
  args := TradeServiceConfigKeysArgs{
  ExchangeConfigs : exchange_configs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}

// Parameters:
//  - AmountConfig
func (p *TradeServiceClient) ConfigAmount(amount_config *AmountConfig) (err error) {
  if err = p.sendConfigAmount(amount_config); err != nil { return }
  return
}

func (p *TradeServiceClient) sendConfigAmount(amount_config *AmountConfig)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("config_amount", thrift.ONEWAY, p.SeqId); err != nil {
      return
  }
  args := TradeServiceConfigAmountArgs{
  AmountConfig : amount_config,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}

func (p *TradeServiceClient) GetExchangeStatus() (r *ExchangeStatus, err error) {
  if err = p.sendGetExchangeStatus(); err != nil { return }
  return p.recvGetExchangeStatus()
}

func (p *TradeServiceClient) sendGetExchangeStatus()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_exchange_status", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := TradeServiceGetExchangeStatusArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *TradeServiceClient) recvGetExchangeStatus() (value *ExchangeStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_exchange_status" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_exchange_status failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_exchange_status failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_exchange_status failed: invalid message type")
    return
  }
  result := TradeServiceGetExchangeStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Price
//  - TradeType
func (p *TradeServiceClient) CheckPrice(price float64, trade_type TradeType) (err error) {
  if err = p.sendCheckPrice(price, trade_type); err != nil { return }
  return p.recvCheckPrice()
}

func (p *TradeServiceClient) sendCheckPrice(price float64, trade_type TradeType)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("check_price", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := TradeServiceCheckPriceArgs{
  Price : price,
  TradeType : trade_type,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *TradeServiceClient) recvCheckPrice() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "check_price" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "check_price failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "check_price failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "check_price failed: invalid message type")
    return
  }
  result := TradeServiceCheckPriceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.TradeException != nil {
    err = result.TradeException
    return 
  }
  return
}

// Parameters:
//  - Trade
func (p *TradeServiceClient) Buy(trade *Trade) (err error) {
  if err = p.sendBuy(trade); err != nil { return }
  return p.recvBuy()
}

func (p *TradeServiceClient) sendBuy(trade *Trade)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("buy", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := TradeServiceBuyArgs{
  Trade : trade,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *TradeServiceClient) recvBuy() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "buy" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "buy failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "buy failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "buy failed: invalid message type")
    return
  }
  result := TradeServiceBuyResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.TradeException != nil {
    err = result.TradeException
    return 
  }
  return
}

// Parameters:
//  - Trade
func (p *TradeServiceClient) Sell(trade *Trade) (err error) {
  if err = p.sendSell(trade); err != nil { return }
  return p.recvSell()
}

func (p *TradeServiceClient) sendSell(trade *Trade)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("sell", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := TradeServiceSellArgs{
  Trade : trade,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *TradeServiceClient) recvSell() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "sell" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sell failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sell failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sell failed: invalid message type")
    return
  }
  result := TradeServiceSellResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.TradeException != nil {
    err = result.TradeException
    return 
  }
  return
}

func (p *TradeServiceClient) GetTicker() (r *Ticker, err error) {
  if err = p.sendGetTicker(); err != nil { return }
  return p.recvGetTicker()
}

func (p *TradeServiceClient) sendGetTicker()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_ticker", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := TradeServiceGetTickerArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *TradeServiceClient) recvGetTicker() (value *Ticker, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_ticker" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_ticker failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_ticker failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_ticker failed: invalid message type")
    return
  }
  result := TradeServiceGetTickerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *TradeServiceClient) GetAccount() (r []*Account, err error) {
  if err = p.sendGetAccount(); err != nil { return }
  return p.recvGetAccount()
}

func (p *TradeServiceClient) sendGetAccount()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_account", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := TradeServiceGetAccountArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *TradeServiceClient) recvGetAccount() (value []*Account, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_account" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_account failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_account failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_account failed: invalid message type")
    return
  }
  result := TradeServiceGetAccountResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *TradeServiceClient) GetAlertOrders() (err error) {
  if err = p.sendGetAlertOrders(); err != nil { return }
  return p.recvGetAlertOrders()
}

func (p *TradeServiceClient) sendGetAlertOrders()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_alert_orders", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := TradeServiceGetAlertOrdersArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *TradeServiceClient) recvGetAlertOrders() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_alert_orders" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_alert_orders failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_alert_orders failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_alert_orders failed: invalid message type")
    return
  }
  result := TradeServiceGetAlertOrdersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.TradeException != nil {
    err = result.TradeException
    return 
  }
  return
}


type TradeServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TradeService
}

func (p *TradeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TradeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TradeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTradeServiceProcessor(handler TradeService) *TradeServiceProcessor {

  self14 := &TradeServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self14.processorMap["ping"] = &tradeServiceProcessorPing{handler:handler}
  self14.processorMap["config_keys"] = &tradeServiceProcessorConfigKeys{handler:handler}
  self14.processorMap["config_amount"] = &tradeServiceProcessorConfigAmount{handler:handler}
  self14.processorMap["get_exchange_status"] = &tradeServiceProcessorGetExchangeStatus{handler:handler}
  self14.processorMap["check_price"] = &tradeServiceProcessorCheckPrice{handler:handler}
  self14.processorMap["buy"] = &tradeServiceProcessorBuy{handler:handler}
  self14.processorMap["sell"] = &tradeServiceProcessorSell{handler:handler}
  self14.processorMap["get_ticker"] = &tradeServiceProcessorGetTicker{handler:handler}
  self14.processorMap["get_account"] = &tradeServiceProcessorGetAccount{handler:handler}
  self14.processorMap["get_alert_orders"] = &tradeServiceProcessorGetAlertOrders{handler:handler}
return self14
}

func (p *TradeServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x15 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x15.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x15

}

type tradeServiceProcessorPing struct {
  handler TradeService
}

func (p *tradeServiceProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TradeServicePingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.Ping(); err2 != nil {
    return true, err2
  }
  return true, nil
}

type tradeServiceProcessorConfigKeys struct {
  handler TradeService
}

func (p *tradeServiceProcessorConfigKeys) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TradeServiceConfigKeysArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.ConfigKeys(args.ExchangeConfigs); err2 != nil {
    return true, err2
  }
  return true, nil
}

type tradeServiceProcessorConfigAmount struct {
  handler TradeService
}

func (p *tradeServiceProcessorConfigAmount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TradeServiceConfigAmountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.ConfigAmount(args.AmountConfig); err2 != nil {
    return true, err2
  }
  return true, nil
}

type tradeServiceProcessorGetExchangeStatus struct {
  handler TradeService
}

func (p *tradeServiceProcessorGetExchangeStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TradeServiceGetExchangeStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_exchange_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TradeServiceGetExchangeStatusResult{}
var retval *ExchangeStatus
  var err2 error
  if retval, err2 = p.handler.GetExchangeStatus(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_exchange_status: " + err2.Error())
    oprot.WriteMessageBegin("get_exchange_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_exchange_status", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tradeServiceProcessorCheckPrice struct {
  handler TradeService
}

func (p *tradeServiceProcessorCheckPrice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TradeServiceCheckPriceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("check_price", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TradeServiceCheckPriceResult{}
  var err2 error
  if err2 = p.handler.CheckPrice(args.Price, args.TradeType); err2 != nil {
  switch v := err2.(type) {
    case *TradeException:
  result.TradeException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check_price: " + err2.Error())
    oprot.WriteMessageBegin("check_price", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("check_price", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tradeServiceProcessorBuy struct {
  handler TradeService
}

func (p *tradeServiceProcessorBuy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TradeServiceBuyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("buy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TradeServiceBuyResult{}
  var err2 error
  if err2 = p.handler.Buy(args.Trade); err2 != nil {
  switch v := err2.(type) {
    case *TradeException:
  result.TradeException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing buy: " + err2.Error())
    oprot.WriteMessageBegin("buy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("buy", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tradeServiceProcessorSell struct {
  handler TradeService
}

func (p *tradeServiceProcessorSell) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TradeServiceSellArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sell", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TradeServiceSellResult{}
  var err2 error
  if err2 = p.handler.Sell(args.Trade); err2 != nil {
  switch v := err2.(type) {
    case *TradeException:
  result.TradeException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sell: " + err2.Error())
    oprot.WriteMessageBegin("sell", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("sell", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tradeServiceProcessorGetTicker struct {
  handler TradeService
}

func (p *tradeServiceProcessorGetTicker) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TradeServiceGetTickerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_ticker", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TradeServiceGetTickerResult{}
var retval *Ticker
  var err2 error
  if retval, err2 = p.handler.GetTicker(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_ticker: " + err2.Error())
    oprot.WriteMessageBegin("get_ticker", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_ticker", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tradeServiceProcessorGetAccount struct {
  handler TradeService
}

func (p *tradeServiceProcessorGetAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TradeServiceGetAccountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_account", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TradeServiceGetAccountResult{}
var retval []*Account
  var err2 error
  if retval, err2 = p.handler.GetAccount(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_account: " + err2.Error())
    oprot.WriteMessageBegin("get_account", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_account", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tradeServiceProcessorGetAlertOrders struct {
  handler TradeService
}

func (p *tradeServiceProcessorGetAlertOrders) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TradeServiceGetAlertOrdersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_alert_orders", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TradeServiceGetAlertOrdersResult{}
  var err2 error
  if err2 = p.handler.GetAlertOrders(); err2 != nil {
  switch v := err2.(type) {
    case *TradeException:
  result.TradeException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_alert_orders: " + err2.Error())
    oprot.WriteMessageBegin("get_alert_orders", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("get_alert_orders", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type TradeServicePingArgs struct {
}

func NewTradeServicePingArgs() *TradeServicePingArgs {
  return &TradeServicePingArgs{}
}

func (p *TradeServicePingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServicePingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServicePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServicePingArgs(%+v)", *p)
}

// Attributes:
//  - ExchangeConfigs
type TradeServiceConfigKeysArgs struct {
  ExchangeConfigs []*ExchangeConfig `thrift:"exchange_configs,1" db:"exchange_configs" json:"exchange_configs"`
}

func NewTradeServiceConfigKeysArgs() *TradeServiceConfigKeysArgs {
  return &TradeServiceConfigKeysArgs{}
}


func (p *TradeServiceConfigKeysArgs) GetExchangeConfigs() []*ExchangeConfig {
  return p.ExchangeConfigs
}
func (p *TradeServiceConfigKeysArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceConfigKeysArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExchangeConfig, 0, size)
  p.ExchangeConfigs =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &ExchangeConfig{}
    if err := _elem16.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.ExchangeConfigs = append(p.ExchangeConfigs, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TradeServiceConfigKeysArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("config_keys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceConfigKeysArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exchange_configs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exchange_configs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExchangeConfigs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ExchangeConfigs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exchange_configs: ", p), err) }
  return err
}

func (p *TradeServiceConfigKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceConfigKeysArgs(%+v)", *p)
}

// Attributes:
//  - AmountConfig
type TradeServiceConfigAmountArgs struct {
  AmountConfig *AmountConfig `thrift:"amount_config,1" db:"amount_config" json:"amount_config"`
}

func NewTradeServiceConfigAmountArgs() *TradeServiceConfigAmountArgs {
  return &TradeServiceConfigAmountArgs{}
}

var TradeServiceConfigAmountArgs_AmountConfig_DEFAULT *AmountConfig
func (p *TradeServiceConfigAmountArgs) GetAmountConfig() *AmountConfig {
  if !p.IsSetAmountConfig() {
    return TradeServiceConfigAmountArgs_AmountConfig_DEFAULT
  }
return p.AmountConfig
}
func (p *TradeServiceConfigAmountArgs) IsSetAmountConfig() bool {
  return p.AmountConfig != nil
}

func (p *TradeServiceConfigAmountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceConfigAmountArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AmountConfig = &AmountConfig{}
  if err := p.AmountConfig.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AmountConfig), err)
  }
  return nil
}

func (p *TradeServiceConfigAmountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("config_amount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceConfigAmountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount_config", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:amount_config: ", p), err) }
  if err := p.AmountConfig.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AmountConfig), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:amount_config: ", p), err) }
  return err
}

func (p *TradeServiceConfigAmountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceConfigAmountArgs(%+v)", *p)
}

type TradeServiceGetExchangeStatusArgs struct {
}

func NewTradeServiceGetExchangeStatusArgs() *TradeServiceGetExchangeStatusArgs {
  return &TradeServiceGetExchangeStatusArgs{}
}

func (p *TradeServiceGetExchangeStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceGetExchangeStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_exchange_status_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceGetExchangeStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceGetExchangeStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TradeServiceGetExchangeStatusResult struct {
  Success *ExchangeStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTradeServiceGetExchangeStatusResult() *TradeServiceGetExchangeStatusResult {
  return &TradeServiceGetExchangeStatusResult{}
}

var TradeServiceGetExchangeStatusResult_Success_DEFAULT *ExchangeStatus
func (p *TradeServiceGetExchangeStatusResult) GetSuccess() *ExchangeStatus {
  if !p.IsSetSuccess() {
    return TradeServiceGetExchangeStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *TradeServiceGetExchangeStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TradeServiceGetExchangeStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceGetExchangeStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ExchangeStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TradeServiceGetExchangeStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_exchange_status_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceGetExchangeStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TradeServiceGetExchangeStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceGetExchangeStatusResult(%+v)", *p)
}

// Attributes:
//  - Price
//  - TradeType
type TradeServiceCheckPriceArgs struct {
  Price float64 `thrift:"price,1" db:"price" json:"price"`
  TradeType TradeType `thrift:"trade_type,2" db:"trade_type" json:"trade_type"`
}

func NewTradeServiceCheckPriceArgs() *TradeServiceCheckPriceArgs {
  return &TradeServiceCheckPriceArgs{}
}


func (p *TradeServiceCheckPriceArgs) GetPrice() float64 {
  return p.Price
}

func (p *TradeServiceCheckPriceArgs) GetTradeType() TradeType {
  return p.TradeType
}
func (p *TradeServiceCheckPriceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceCheckPriceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *TradeServiceCheckPriceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TradeType(v)
  p.TradeType = temp
}
  return nil
}

func (p *TradeServiceCheckPriceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("check_price_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceCheckPriceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:price: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:price: ", p), err) }
  return err
}

func (p *TradeServiceCheckPriceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trade_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.TradeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trade_type: ", p), err) }
  return err
}

func (p *TradeServiceCheckPriceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceCheckPriceArgs(%+v)", *p)
}

// Attributes:
//  - TradeException
type TradeServiceCheckPriceResult struct {
  TradeException *TradeException `thrift:"tradeException,1" db:"tradeException" json:"tradeException,omitempty"`
}

func NewTradeServiceCheckPriceResult() *TradeServiceCheckPriceResult {
  return &TradeServiceCheckPriceResult{}
}

var TradeServiceCheckPriceResult_TradeException_DEFAULT *TradeException
func (p *TradeServiceCheckPriceResult) GetTradeException() *TradeException {
  if !p.IsSetTradeException() {
    return TradeServiceCheckPriceResult_TradeException_DEFAULT
  }
return p.TradeException
}
func (p *TradeServiceCheckPriceResult) IsSetTradeException() bool {
  return p.TradeException != nil
}

func (p *TradeServiceCheckPriceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceCheckPriceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.TradeException = &TradeException{}
  if err := p.TradeException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TradeException), err)
  }
  return nil
}

func (p *TradeServiceCheckPriceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("check_price_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceCheckPriceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTradeException() {
    if err := oprot.WriteFieldBegin("tradeException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeException: ", p), err) }
    if err := p.TradeException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TradeException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeException: ", p), err) }
  }
  return err
}

func (p *TradeServiceCheckPriceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceCheckPriceResult(%+v)", *p)
}

// Attributes:
//  - Trade
type TradeServiceBuyArgs struct {
  Trade *Trade `thrift:"trade,1" db:"trade" json:"trade"`
}

func NewTradeServiceBuyArgs() *TradeServiceBuyArgs {
  return &TradeServiceBuyArgs{}
}

var TradeServiceBuyArgs_Trade_DEFAULT *Trade
func (p *TradeServiceBuyArgs) GetTrade() *Trade {
  if !p.IsSetTrade() {
    return TradeServiceBuyArgs_Trade_DEFAULT
  }
return p.Trade
}
func (p *TradeServiceBuyArgs) IsSetTrade() bool {
  return p.Trade != nil
}

func (p *TradeServiceBuyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceBuyArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Trade = &Trade{}
  if err := p.Trade.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Trade), err)
  }
  return nil
}

func (p *TradeServiceBuyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("buy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceBuyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:trade: ", p), err) }
  if err := p.Trade.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Trade), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:trade: ", p), err) }
  return err
}

func (p *TradeServiceBuyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceBuyArgs(%+v)", *p)
}

// Attributes:
//  - TradeException
type TradeServiceBuyResult struct {
  TradeException *TradeException `thrift:"tradeException,1" db:"tradeException" json:"tradeException,omitempty"`
}

func NewTradeServiceBuyResult() *TradeServiceBuyResult {
  return &TradeServiceBuyResult{}
}

var TradeServiceBuyResult_TradeException_DEFAULT *TradeException
func (p *TradeServiceBuyResult) GetTradeException() *TradeException {
  if !p.IsSetTradeException() {
    return TradeServiceBuyResult_TradeException_DEFAULT
  }
return p.TradeException
}
func (p *TradeServiceBuyResult) IsSetTradeException() bool {
  return p.TradeException != nil
}

func (p *TradeServiceBuyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceBuyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.TradeException = &TradeException{}
  if err := p.TradeException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TradeException), err)
  }
  return nil
}

func (p *TradeServiceBuyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("buy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceBuyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTradeException() {
    if err := oprot.WriteFieldBegin("tradeException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeException: ", p), err) }
    if err := p.TradeException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TradeException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeException: ", p), err) }
  }
  return err
}

func (p *TradeServiceBuyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceBuyResult(%+v)", *p)
}

// Attributes:
//  - Trade
type TradeServiceSellArgs struct {
  Trade *Trade `thrift:"trade,1" db:"trade" json:"trade"`
}

func NewTradeServiceSellArgs() *TradeServiceSellArgs {
  return &TradeServiceSellArgs{}
}

var TradeServiceSellArgs_Trade_DEFAULT *Trade
func (p *TradeServiceSellArgs) GetTrade() *Trade {
  if !p.IsSetTrade() {
    return TradeServiceSellArgs_Trade_DEFAULT
  }
return p.Trade
}
func (p *TradeServiceSellArgs) IsSetTrade() bool {
  return p.Trade != nil
}

func (p *TradeServiceSellArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceSellArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Trade = &Trade{}
  if err := p.Trade.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Trade), err)
  }
  return nil
}

func (p *TradeServiceSellArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sell_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceSellArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:trade: ", p), err) }
  if err := p.Trade.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Trade), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:trade: ", p), err) }
  return err
}

func (p *TradeServiceSellArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceSellArgs(%+v)", *p)
}

// Attributes:
//  - TradeException
type TradeServiceSellResult struct {
  TradeException *TradeException `thrift:"tradeException,1" db:"tradeException" json:"tradeException,omitempty"`
}

func NewTradeServiceSellResult() *TradeServiceSellResult {
  return &TradeServiceSellResult{}
}

var TradeServiceSellResult_TradeException_DEFAULT *TradeException
func (p *TradeServiceSellResult) GetTradeException() *TradeException {
  if !p.IsSetTradeException() {
    return TradeServiceSellResult_TradeException_DEFAULT
  }
return p.TradeException
}
func (p *TradeServiceSellResult) IsSetTradeException() bool {
  return p.TradeException != nil
}

func (p *TradeServiceSellResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceSellResult)  ReadField1(iprot thrift.TProtocol) error {
  p.TradeException = &TradeException{}
  if err := p.TradeException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TradeException), err)
  }
  return nil
}

func (p *TradeServiceSellResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sell_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceSellResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTradeException() {
    if err := oprot.WriteFieldBegin("tradeException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeException: ", p), err) }
    if err := p.TradeException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TradeException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeException: ", p), err) }
  }
  return err
}

func (p *TradeServiceSellResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceSellResult(%+v)", *p)
}

type TradeServiceGetTickerArgs struct {
}

func NewTradeServiceGetTickerArgs() *TradeServiceGetTickerArgs {
  return &TradeServiceGetTickerArgs{}
}

func (p *TradeServiceGetTickerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceGetTickerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_ticker_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceGetTickerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceGetTickerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TradeServiceGetTickerResult struct {
  Success *Ticker `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTradeServiceGetTickerResult() *TradeServiceGetTickerResult {
  return &TradeServiceGetTickerResult{}
}

var TradeServiceGetTickerResult_Success_DEFAULT *Ticker
func (p *TradeServiceGetTickerResult) GetSuccess() *Ticker {
  if !p.IsSetSuccess() {
    return TradeServiceGetTickerResult_Success_DEFAULT
  }
return p.Success
}
func (p *TradeServiceGetTickerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TradeServiceGetTickerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceGetTickerResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Ticker{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TradeServiceGetTickerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_ticker_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceGetTickerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TradeServiceGetTickerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceGetTickerResult(%+v)", *p)
}

type TradeServiceGetAccountArgs struct {
}

func NewTradeServiceGetAccountArgs() *TradeServiceGetAccountArgs {
  return &TradeServiceGetAccountArgs{}
}

func (p *TradeServiceGetAccountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceGetAccountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_account_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceGetAccountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceGetAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TradeServiceGetAccountResult struct {
  Success []*Account `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTradeServiceGetAccountResult() *TradeServiceGetAccountResult {
  return &TradeServiceGetAccountResult{}
}

var TradeServiceGetAccountResult_Success_DEFAULT []*Account

func (p *TradeServiceGetAccountResult) GetSuccess() []*Account {
  return p.Success
}
func (p *TradeServiceGetAccountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TradeServiceGetAccountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceGetAccountResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Account, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &Account{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Success = append(p.Success, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TradeServiceGetAccountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_account_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceGetAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TradeServiceGetAccountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceGetAccountResult(%+v)", *p)
}

type TradeServiceGetAlertOrdersArgs struct {
}

func NewTradeServiceGetAlertOrdersArgs() *TradeServiceGetAlertOrdersArgs {
  return &TradeServiceGetAlertOrdersArgs{}
}

func (p *TradeServiceGetAlertOrdersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceGetAlertOrdersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_alert_orders_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceGetAlertOrdersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceGetAlertOrdersArgs(%+v)", *p)
}

// Attributes:
//  - TradeException
type TradeServiceGetAlertOrdersResult struct {
  TradeException *TradeException `thrift:"tradeException,1" db:"tradeException" json:"tradeException,omitempty"`
}

func NewTradeServiceGetAlertOrdersResult() *TradeServiceGetAlertOrdersResult {
  return &TradeServiceGetAlertOrdersResult{}
}

var TradeServiceGetAlertOrdersResult_TradeException_DEFAULT *TradeException
func (p *TradeServiceGetAlertOrdersResult) GetTradeException() *TradeException {
  if !p.IsSetTradeException() {
    return TradeServiceGetAlertOrdersResult_TradeException_DEFAULT
  }
return p.TradeException
}
func (p *TradeServiceGetAlertOrdersResult) IsSetTradeException() bool {
  return p.TradeException != nil
}

func (p *TradeServiceGetAlertOrdersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TradeServiceGetAlertOrdersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.TradeException = &TradeException{}
  if err := p.TradeException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TradeException), err)
  }
  return nil
}

func (p *TradeServiceGetAlertOrdersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_alert_orders_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TradeServiceGetAlertOrdersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTradeException() {
    if err := oprot.WriteFieldBegin("tradeException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeException: ", p), err) }
    if err := p.TradeException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TradeException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeException: ", p), err) }
  }
  return err
}

func (p *TradeServiceGetAlertOrdersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TradeServiceGetAlertOrdersResult(%+v)", *p)
}


