// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package trade_service

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type TradeType int64

const (
	TradeType_BUY  TradeType = 0
	TradeType_SELL TradeType = 1
)

func (p TradeType) String() string {
	switch p {
	case TradeType_BUY:
		return "BUY"
	case TradeType_SELL:
		return "SELL"
	}
	return "<UNSET>"
}

func TradeTypeFromString(s string) (TradeType, error) {
	switch s {
	case "BUY":
		return TradeType_BUY, nil
	case "SELL":
		return TradeType_SELL, nil
	}
	return TradeType(0), fmt.Errorf("not a valid TradeType string")
}

func TradeTypePtr(v TradeType) *TradeType { return &v }

func (p TradeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TradeType) UnmarshalText(text []byte) error {
	q, err := TradeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type OrderStatus int64

const (
	OrderStatus_TIME_WEIGHTED OrderStatus = 0
	OrderStatus_SPLIT         OrderStatus = 1
	OrderStatus_READY         OrderStatus = 2
	OrderStatus_ORDERED       OrderStatus = 3
	OrderStatus_SUCCESS       OrderStatus = 4
	OrderStatus_ERROR         OrderStatus = 5
	OrderStatus_CANCELED      OrderStatus = 6
	OrderStatus_MATCH         OrderStatus = 7
)

func (p OrderStatus) String() string {
	switch p {
	case OrderStatus_TIME_WEIGHTED:
		return "TIME_WEIGHTED"
	case OrderStatus_SPLIT:
		return "SPLIT"
	case OrderStatus_READY:
		return "READY"
	case OrderStatus_ORDERED:
		return "ORDERED"
	case OrderStatus_SUCCESS:
		return "SUCCESS"
	case OrderStatus_ERROR:
		return "ERROR"
	case OrderStatus_CANCELED:
		return "CANCELED"
	case OrderStatus_MATCH:
		return "MATCH"
	}
	return "<UNSET>"
}

func OrderStatusFromString(s string) (OrderStatus, error) {
	switch s {
	case "TIME_WEIGHTED":
		return OrderStatus_TIME_WEIGHTED, nil
	case "SPLIT":
		return OrderStatus_SPLIT, nil
	case "READY":
		return OrderStatus_READY, nil
	case "ORDERED":
		return OrderStatus_ORDERED, nil
	case "SUCCESS":
		return OrderStatus_SUCCESS, nil
	case "ERROR":
		return OrderStatus_ERROR, nil
	case "CANCELED":
		return OrderStatus_CANCELED, nil
	case "MATCH":
		return OrderStatus_MATCH, nil
	}
	return OrderStatus(0), fmt.Errorf("not a valid OrderStatus string")
}

func OrderStatusPtr(v OrderStatus) *OrderStatus { return &v }

func (p OrderStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *OrderStatus) UnmarshalText(text []byte) error {
	q, err := OrderStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Reason
type TradeException struct {
	Reason string `thrift:"reason,1" json:"reason"`
}

func NewTradeException() *TradeException {
	return &TradeException{}
}

func (p *TradeException) GetReason() string {
	return p.Reason
}
func (p *TradeException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *TradeException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reason: ", p), err)
	}
	return err
}

func (p *TradeException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeException(%+v)", *p)
}

func (p *TradeException) Error() string {
	return p.String()
}

// Attributes:
//  - Canbuy
//  - Cansell
type ExchangeStatus struct {
	Canbuy  bool `thrift:"canbuy,1" json:"canbuy"`
	Cansell bool `thrift:"cansell,2" json:"cansell"`
}

func NewExchangeStatus() *ExchangeStatus {
	return &ExchangeStatus{}
}

func (p *ExchangeStatus) GetCanbuy() bool {
	return p.Canbuy
}

func (p *ExchangeStatus) GetCansell() bool {
	return p.Cansell
}
func (p *ExchangeStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExchangeStatus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Canbuy = v
	}
	return nil
}

func (p *ExchangeStatus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cansell = v
	}
	return nil
}

func (p *ExchangeStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExchangeStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExchangeStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("canbuy", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:canbuy: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Canbuy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.canbuy (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:canbuy: ", p), err)
	}
	return err
}

func (p *ExchangeStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cansell", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cansell: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Cansell)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cansell (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cansell: ", p), err)
	}
	return err
}

func (p *ExchangeStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExchangeStatus(%+v)", *p)
}

// Attributes:
//  - Exchange
//  - AccessKey
//  - SecretKey
type ExchangeConfig struct {
	Exchange  string `thrift:"exchange,1" json:"exchange"`
	AccessKey string `thrift:"access_key,2" json:"access_key"`
	SecretKey string `thrift:"secret_key,3" json:"secret_key"`
}

func NewExchangeConfig() *ExchangeConfig {
	return &ExchangeConfig{}
}

func (p *ExchangeConfig) GetExchange() string {
	return p.Exchange
}

func (p *ExchangeConfig) GetAccessKey() string {
	return p.AccessKey
}

func (p *ExchangeConfig) GetSecretKey() string {
	return p.SecretKey
}
func (p *ExchangeConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExchangeConfig) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Exchange = v
	}
	return nil
}

func (p *ExchangeConfig) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AccessKey = v
	}
	return nil
}

func (p *ExchangeConfig) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SecretKey = v
	}
	return nil
}

func (p *ExchangeConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExchangeConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExchangeConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exchange", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exchange: ", p), err)
	}
	if err := oprot.WriteString(string(p.Exchange)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.exchange (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exchange: ", p), err)
	}
	return err
}

func (p *ExchangeConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_key", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:access_key: ", p), err)
	}
	if err := oprot.WriteString(string(p.AccessKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.access_key (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:access_key: ", p), err)
	}
	return err
}

func (p *ExchangeConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("secret_key", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:secret_key: ", p), err)
	}
	if err := oprot.WriteString(string(p.SecretKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.secret_key (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:secret_key: ", p), err)
	}
	return err
}

func (p *ExchangeConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExchangeConfig(%+v)", *p)
}

// Attributes:
//  - MaxCny
//  - MaxBtc
type AmountConfig struct {
	MaxCny float64 `thrift:"max_cny,1" json:"max_cny"`
	MaxBtc float64 `thrift:"max_btc,2" json:"max_btc"`
}

func NewAmountConfig() *AmountConfig {
	return &AmountConfig{}
}

func (p *AmountConfig) GetMaxCny() float64 {
	return p.MaxCny
}

func (p *AmountConfig) GetMaxBtc() float64 {
	return p.MaxBtc
}
func (p *AmountConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AmountConfig) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaxCny = v
	}
	return nil
}

func (p *AmountConfig) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaxBtc = v
	}
	return nil
}

func (p *AmountConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AmountConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AmountConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_cny", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:max_cny: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.MaxCny)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_cny (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:max_cny: ", p), err)
	}
	return err
}

func (p *AmountConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_btc", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max_btc: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.MaxBtc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_btc (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max_btc: ", p), err)
	}
	return err
}

func (p *AmountConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AmountConfig(%+v)", *p)
}

// Attributes:
//  - Exchange
//  - AvailableCny
//  - AvailableBtc
//  - FrozenCny
//  - FrozenBtc
//  - PauseTrade
type Account struct {
	Exchange     string  `thrift:"exchange,1" json:"exchange"`
	AvailableCny float64 `thrift:"available_cny,2" json:"available_cny"`
	AvailableBtc float64 `thrift:"available_btc,3" json:"available_btc"`
	FrozenCny    float64 `thrift:"frozen_cny,4" json:"frozen_cny"`
	FrozenBtc    float64 `thrift:"frozen_btc,5" json:"frozen_btc"`
	PauseTrade   bool    `thrift:"pause_trade,6" json:"pause_trade"`
}

func NewAccount() *Account {
	return &Account{}
}

func (p *Account) GetExchange() string {
	return p.Exchange
}

func (p *Account) GetAvailableCny() float64 {
	return p.AvailableCny
}

func (p *Account) GetAvailableBtc() float64 {
	return p.AvailableBtc
}

func (p *Account) GetFrozenCny() float64 {
	return p.FrozenCny
}

func (p *Account) GetFrozenBtc() float64 {
	return p.FrozenBtc
}

func (p *Account) GetPauseTrade() bool {
	return p.PauseTrade
}
func (p *Account) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Account) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Exchange = v
	}
	return nil
}

func (p *Account) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AvailableCny = v
	}
	return nil
}

func (p *Account) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AvailableBtc = v
	}
	return nil
}

func (p *Account) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FrozenCny = v
	}
	return nil
}

func (p *Account) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FrozenBtc = v
	}
	return nil
}

func (p *Account) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PauseTrade = v
	}
	return nil
}

func (p *Account) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Account"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Account) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exchange", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exchange: ", p), err)
	}
	if err := oprot.WriteString(string(p.Exchange)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.exchange (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exchange: ", p), err)
	}
	return err
}

func (p *Account) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("available_cny", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:available_cny: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AvailableCny)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.available_cny (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:available_cny: ", p), err)
	}
	return err
}

func (p *Account) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("available_btc", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:available_btc: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AvailableBtc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.available_btc (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:available_btc: ", p), err)
	}
	return err
}

func (p *Account) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("frozen_cny", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:frozen_cny: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FrozenCny)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.frozen_cny (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:frozen_cny: ", p), err)
	}
	return err
}

func (p *Account) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("frozen_btc", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:frozen_btc: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FrozenBtc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.frozen_btc (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:frozen_btc: ", p), err)
	}
	return err
}

func (p *Account) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pause_trade", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pause_trade: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PauseTrade)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pause_trade (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pause_trade: ", p), err)
	}
	return err
}

func (p *Account) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Account(%+v)", *p)
}

// Attributes:
//  - Ask
//  - Bid
type Ticker struct {
	Ask float64 `thrift:"ask,1" json:"ask"`
	Bid float64 `thrift:"bid,2" json:"bid"`
}

func NewTicker() *Ticker {
	return &Ticker{}
}

func (p *Ticker) GetAsk() float64 {
	return p.Ask
}

func (p *Ticker) GetBid() float64 {
	return p.Bid
}
func (p *Ticker) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Ticker) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ask = v
	}
	return nil
}

func (p *Ticker) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Bid = v
	}
	return nil
}

func (p *Ticker) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ticker"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Ticker) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ask", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ask: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Ask)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ask (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ask: ", p), err)
	}
	return err
}

func (p *Ticker) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bid", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bid: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Bid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bid: ", p), err)
	}
	return err
}

func (p *Ticker) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ticker(%+v)", *p)
}

// Attributes:
//  - ClientID
//  - Amount
//  - Price
type Trade struct {
	ClientID string  `thrift:"client_id,1" json:"client_id"`
	Amount   float64 `thrift:"amount,2" json:"amount"`
	Price    float64 `thrift:"price,3" json:"price"`
}

func NewTrade() *Trade {
	return &Trade{}
}

func (p *Trade) GetClientID() string {
	return p.ClientID
}

func (p *Trade) GetAmount() float64 {
	return p.Amount
}

func (p *Trade) GetPrice() float64 {
	return p.Price
}
func (p *Trade) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Trade) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClientID = v
	}
	return nil
}

func (p *Trade) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *Trade) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *Trade) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Trade"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Trade) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("client_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClientID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.client_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client_id: ", p), err)
	}
	return err
}

func (p *Trade) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *Trade) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.price (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:price: ", p), err)
	}
	return err
}

func (p *Trade) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Trade(%+v)", *p)
}

// Attributes:
//  - ID
//  - SiteOrderID
//  - Exchange
//  - Price
//  - TradeType
//  - OrderStatus
//  - EstimateCny
//  - EstimateBtc
//  - EstimatePrice
//  - DealCny
//  - DealBtc
//  - DealPrice
//  - PriceMargin
//  - OrderID
//  - Created
//  - UpdateAt
//  - TryTimes
//  - Info
//  - Memo
//  - MatchID
type TradeOrder struct {
	ID            int64       `thrift:"id,1" json:"id"`
	SiteOrderID   int64       `thrift:"site_order_id,2" json:"site_order_id"`
	Exchange      string      `thrift:"exchange,3" json:"exchange"`
	Price         float64     `thrift:"price,4" json:"price"`
	TradeType     TradeType   `thrift:"trade_type,5" json:"trade_type"`
	OrderStatus   OrderStatus `thrift:"order_status,6" json:"order_status"`
	EstimateCny   float64     `thrift:"estimate_cny,7" json:"estimate_cny"`
	EstimateBtc   float64     `thrift:"estimate_btc,8" json:"estimate_btc"`
	EstimatePrice float64     `thrift:"estimate_price,9" json:"estimate_price"`
	DealCny       float64     `thrift:"deal_cny,10" json:"deal_cny"`
	DealBtc       float64     `thrift:"deal_btc,11" json:"deal_btc"`
	DealPrice     float64     `thrift:"deal_price,12" json:"deal_price"`
	PriceMargin   float64     `thrift:"price_margin,13" json:"price_margin"`
	OrderID       string      `thrift:"order_id,14" json:"order_id"`
	Created       string      `thrift:"created,15" json:"created"`
	UpdateAt      string      `thrift:"update_at,16" json:"update_at"`
	TryTimes      int64       `thrift:"try_times,17" json:"try_times"`
	Info          string      `thrift:"info,18" json:"info"`
	Memo          string      `thrift:"memo,19" json:"memo"`
	MatchID       int64       `thrift:"match_id,20" json:"match_id"`
}

func NewTradeOrder() *TradeOrder {
	return &TradeOrder{}
}

func (p *TradeOrder) GetID() int64 {
	return p.ID
}

func (p *TradeOrder) GetSiteOrderID() int64 {
	return p.SiteOrderID
}

func (p *TradeOrder) GetExchange() string {
	return p.Exchange
}

func (p *TradeOrder) GetPrice() float64 {
	return p.Price
}

func (p *TradeOrder) GetTradeType() TradeType {
	return p.TradeType
}

func (p *TradeOrder) GetOrderStatus() OrderStatus {
	return p.OrderStatus
}

func (p *TradeOrder) GetEstimateCny() float64 {
	return p.EstimateCny
}

func (p *TradeOrder) GetEstimateBtc() float64 {
	return p.EstimateBtc
}

func (p *TradeOrder) GetEstimatePrice() float64 {
	return p.EstimatePrice
}

func (p *TradeOrder) GetDealCny() float64 {
	return p.DealCny
}

func (p *TradeOrder) GetDealBtc() float64 {
	return p.DealBtc
}

func (p *TradeOrder) GetDealPrice() float64 {
	return p.DealPrice
}

func (p *TradeOrder) GetPriceMargin() float64 {
	return p.PriceMargin
}

func (p *TradeOrder) GetOrderID() string {
	return p.OrderID
}

func (p *TradeOrder) GetCreated() string {
	return p.Created
}

func (p *TradeOrder) GetUpdateAt() string {
	return p.UpdateAt
}

func (p *TradeOrder) GetTryTimes() int64 {
	return p.TryTimes
}

func (p *TradeOrder) GetInfo() string {
	return p.Info
}

func (p *TradeOrder) GetMemo() string {
	return p.Memo
}

func (p *TradeOrder) GetMatchID() int64 {
	return p.MatchID
}
func (p *TradeOrder) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TradeOrder) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TradeOrder) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SiteOrderID = v
	}
	return nil
}

func (p *TradeOrder) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Exchange = v
	}
	return nil
}

func (p *TradeOrder) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *TradeOrder) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := TradeType(v)
		p.TradeType = temp
	}
	return nil
}

func (p *TradeOrder) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := OrderStatus(v)
		p.OrderStatus = temp
	}
	return nil
}

func (p *TradeOrder) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.EstimateCny = v
	}
	return nil
}

func (p *TradeOrder) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.EstimateBtc = v
	}
	return nil
}

func (p *TradeOrder) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.EstimatePrice = v
	}
	return nil
}

func (p *TradeOrder) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.DealCny = v
	}
	return nil
}

func (p *TradeOrder) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.DealBtc = v
	}
	return nil
}

func (p *TradeOrder) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.DealPrice = v
	}
	return nil
}

func (p *TradeOrder) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.PriceMargin = v
	}
	return nil
}

func (p *TradeOrder) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.OrderID = v
	}
	return nil
}

func (p *TradeOrder) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Created = v
	}
	return nil
}

func (p *TradeOrder) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.UpdateAt = v
	}
	return nil
}

func (p *TradeOrder) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.TryTimes = v
	}
	return nil
}

func (p *TradeOrder) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *TradeOrder) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.Memo = v
	}
	return nil
}

func (p *TradeOrder) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.MatchID = v
	}
	return nil
}

func (p *TradeOrder) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeOrder"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TradeOrder) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("site_order_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:site_order_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SiteOrderID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.site_order_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:site_order_id: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exchange", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:exchange: ", p), err)
	}
	if err := oprot.WriteString(string(p.Exchange)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.exchange (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:exchange: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.price (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:price: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trade_type", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trade_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TradeType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.trade_type (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trade_type: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_status", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:order_status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_status (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:order_status: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("estimate_cny", thrift.DOUBLE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:estimate_cny: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.EstimateCny)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.estimate_cny (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:estimate_cny: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("estimate_btc", thrift.DOUBLE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:estimate_btc: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.EstimateBtc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.estimate_btc (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:estimate_btc: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("estimate_price", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:estimate_price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.EstimatePrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.estimate_price (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:estimate_price: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deal_cny", thrift.DOUBLE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:deal_cny: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DealCny)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deal_cny (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:deal_cny: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deal_btc", thrift.DOUBLE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:deal_btc: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DealBtc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deal_btc (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:deal_btc: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deal_price", thrift.DOUBLE, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:deal_price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DealPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deal_price (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:deal_price: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price_margin", thrift.DOUBLE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:price_margin: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.PriceMargin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.price_margin (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:price_margin: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_id", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:order_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_id (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:order_id: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("created", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:created: ", p), err)
	}
	if err := oprot.WriteString(string(p.Created)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.created (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:created: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("update_at", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:update_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.UpdateAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.update_at (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:update_at: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("try_times", thrift.I64, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:try_times: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TryTimes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.try_times (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:try_times: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:info: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memo", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:memo: ", p), err)
	}
	if err := oprot.WriteString(string(p.Memo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memo (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:memo: ", p), err)
	}
	return err
}

func (p *TradeOrder) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("match_id", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:match_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MatchID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.match_id (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:match_id: ", p), err)
	}
	return err
}

func (p *TradeOrder) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeOrder(%+v)", *p)
}
